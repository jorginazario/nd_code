Explains how the user uses the blackjack program:

From the user's perspective, this is a blackjack program game! The rules to play this game are simple: once you start the program, you will be dealt your card and you will be able to see the dealer's card as well. With this information you are to make a decision of whether you want to 'hit' by typing '1' or 'stand/stay' by clicking '2' (You will also have the option of typing in '3' to quit at any time). If you hit and go over 21 you lose and the Dealer wins. After you are done 'hitting', you 'stand' by clicking '2' and the dealer will keep playing cards until he adds up his cards to a total of 17 or more. If the dealer goes over 21 he loses and the player wins. However, if he is in the range of 17-21 and is his sum is greater than the player's, the dealer wins; likewise if the player had a sum greater than the dealer's he would have won. After each and every game the score will be outputted to the player, and he will have the option to keep playing or stop playing 'y/n'.


Explains how the blackjack program works internally.

From the programmer's perspective, this game is fairly simple, besides the fact that there are a lot of if statements to consider in the main Deal() function where all the rules of the game are. To begin with, this program is divided into three separate files: CardDeck class interface, CardDeck class implementation, and the main program. All these files are compiled together using the Makefile. In the main program we instantiate an object of CardDeck with 52 cards and then run the member function of the CardDeck, Deal(). In this function the entire game rules and user interface is layed out. Most of the program is bounded by a while loop that determines if the user still wants to keep playing. Once we know the user wants to play, we shuffle the deck if the game is starting, and we will reshuffle it it we see that we are only missing 15 cards in the deck private member. The shuffling takes place in a function called shuffle() which takes the array of 52 integers from 1-52 and randomly selects an index of the array and swaps it with the first one, and successively the next random int will be swapped with the second number in the array and so on. Once the cards are shuffled, I used the equation [(deck[posit])%13+2] to convert every last number in the deck array into a number from 1-14 since there are 13 cards, and then I convert those cards in the range of 12-14 to represent a value of 10 so that they represent the values of J,Q,K. I assign a card to the dealer and to the player by starting at the beginning of the randomized deck and just incrementing the position of the index by one each time a card is used. Then the game interface is displayed and the program requests the user to input 1,2, or 3. If the user clicks 1, he 'hits' and so on I grab another card from the deck and add to his previous card. If he goes over I display that he loses. If he stands before going over by clicking '2' I make the dealer grab a card until it is 17 of greater (I use the same method I used to the player to add the additional cards). Now come the if statements for checking if the dealer wins or not: If the dealer goes over, the player receieves a win and the program prompts the user wheather he wants to keep playing or not; if the dealer does not go over but has a value greater than that of the player's, dealer wins and has an additional win and the player is prompted wheather he wants to continue or not; the last if statment identifies if the user hand is greater than the dealer hand, and if so the payer receives a win and is also asked wheather he wants to continue playing or not. I also included an if statement for when both hands are equal, and in this case, the game will restart once again and play new cards. If the user prompts 3 the program quits and the program is terminated.

Explains how the blackjack program was verified.

Besides the fact that I am expert in the  game of blackjack (just joking), I do understand the rules very well; and so I played the game a while until I knew I had tested for each and every condition. I wrote all the conditions (and specific cases) in a piece of paper and check marked each one once I had verified each condition for error. By doing this I discovered many specific errors to specific if statements and was able to make an almost flawless program. After all the  testing the program is good to go. Enjoy!

Explains how the user the addition program:

This is probably the easiest program anybody will use. It is a simple calculator that adds two given numbers. After running the program with the executable a.out, the user only has to input a number (it can be more than two digits), then press the Enter key to submit the number, and finally type in the second number and press Enter again. The sum will be display right underneath the last input number.

Explains how the program works internelly:

From the programmer's perspective, this adding calculator is built using the linked list data stucture. So, in the first part of the program you will encounter a Node struct and a List struct, which are going to be used to create our linked list. The Node struct represents a single element of the linked list with a data member of type T (which basically means it can read in any type i.e. int, char, string) and a pointer called next. This pointer will always be pointing to the element that came right before it was instantiated. However, since the constructor is used to create our first Node we must point it to NULL to indicate that it is actually the start of the linked list. 
Then, for the List struct we have some very important member functions: the pushFront() and the print(). The pushFront(T &) takes in any type of variable and inserts it into the linked list at the front. It does this by creating a newNode pointer that points to a newly created Node and inserts the data in it. This newNode pointer is now used to set its own (next) pointer (which is a member of every node) to look at the head which the last element added to the linked list. Finally, the head is updated to the current node we just added. The print() goes through each and every element of the linked list by implmenting a while loop, and prints the data of each node by doing (cout<<temp->data;), where the temp in this case is a pointer set to look at an element that is yet to be printed out. This while loop will exit once the temp pointer points to the NULL. 

After the linked list is set, we proceed to do the the addNumberLists which is literally a function that adds two lists of numbers and creates its own list of numbers with the sum. I created this function by implementing certain if statements inside a while loop. Each if statement is a specific case the addition of two numbers can encounter. Basically what I am doing is taking the front element of each list (which is actually the right-most digit of the number input) and adding them together. If the addition goes over 10 I set the carry to 1 and take the value and %10 to convert to a one digit. I then take the carry and add it to the next two elements being added (which are the preceding elemnts of each list). If the case is that we now have one of the pointers looking at null instead of the data of a node we go into another if statement that just adds the carry and element that was not NULL. When we finally get to the point where both pointers are looking at NULL and there is no more carry, we have completed the sum. Pretty easy right! Then we go into the main function where I instantiate two linked list objects, pass in each input number into a list and then I perform the addNumberLists() function and then print that list that is produced by that function.
 

Explains how the program was verified:

The program was first verified with simple additions of one digit numbers. Then I tested two digit numbers, and then three, and then for each case in my if statement which included the first number having one digit and the second having two digits and vice versa. Once all my manual cases had been tested I went on to actually test it with the Makefile. Using the make test command I found one simple error that I fixed and made the outputs match. The program is now working perfectly. Enjoy!


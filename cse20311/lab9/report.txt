What your program is meant to do, from the user's perspective:
From the user's perspective this program allows the user to create a cross word puzzle with his choice of words. The user can choose to manually type in the words by running the program executable alone or uploading the words via a text file by typing in the executable followed by the name of the text file. In addition to this, the user also has the power of saving his created crossword puzzle by typing the executable, followed by the name of the text file with the words being used, followed by the name of the file in which the user wants to save the crossword. 

After the user has run the executable and has chosen any way to input the words into the crossword, the program will first display the crossword puzzle solutions followed by the crossword puzzle, and then a clues section. The clues section will help the player of the crossword puzzle identify clues for given open spaces in the puzzle by providing the coordinate of the first letter of the word, the direction of the  word, and the randomized letters of the word. 



How the program is structured, from the programmer's perspective:
The program is structured, from the programmer's perspective in three main files: crossword.cpp, board.cpp, and board.h. The baord.cpp and board.h files were used to create the board class, which would serve as a tool to 1)organize the entire program 2)make the entire program more efficient 3)make the crossword.cpp main function shorter and neater. The board class is a class for the crossword puzzle board that has various helpful member functions integrated in it to make the board easier to use. Member functions of the class include a function to insert the first word in the crossword board, a function to insert all other words after the first one, and a function that creates the encoded crossword puzzle board. Of all of these functions it is worth mentioning how the insertBoard function works. This function does the "thinking" behind where exactly each word is placed: this function searches each and every position in the board and identifies (with a set of if statements) where to place the word. 

The crossword.cpp file contains the main function of the program along with other functions and works with the board class to input words into the board, display the board solution, and display the encoded board. The crossword.cpp file includes many other functions to further organize the main function and not repeat lines of code. Taking this into considertion, the insertword, checkcharacters, readvector, fileinserted, generatecrossword, displaycrossword, displayclues, and savefile functions were created for a total of 8 functions. 

The main function is built to read either one, two, or three arguments. Afterthe program is called upon with its 'runit' exectuable it will determine whether or not it has subsequent arguments. If the exectuable is typed in alone, the main function will read one argument and proceed into the if statment that contains the program that requests the user to input the words into the crossword puzzle manually, if the exectuable is followed by the name of the file being used to enter the words for the board, the program will read to arguments and enter into the second version of the program and proceed, and if the exectuable is typed in followed by two more arguments it will enter the third if statement where the program additionally saves the crossword puzzles and its clues in a separate file.

    
How you evaluated the program for correctness. Did you verify that it produces correct results? Are there any cases where it produces incorrect results? Why?
The team members evaluated for program correctness by checking word for word where it had to be exactly. Before running the code the teammates knew where each and every word had to be in accordance with the rules stated in the member function, insertBoard, of the class and then evaluated if the crossword puzzle board displayed matched the correct results. After much trial and error the improvements and bug fixes were made and all the problems were solved. In addition, the investigators checked for correct results by running the program multiple times to make sure that the random_shuffe() function was shuffling the words in the string differently each and every time ran. By testing this, further errors were found and resolved. After everything was tested and debugged, one last minor issue was found. We discovered that when typing the executable along with the two other arguments to save the crossword puzzle in the third argument, there was a mismatch between the randomized word clues because each time a file is saved it randomizes the words itself, separately from how it is randomized in the main function. We decided to leave it as is becuase there is no major problem. 
Enjoy!



